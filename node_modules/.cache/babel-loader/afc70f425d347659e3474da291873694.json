{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Film\\\\clbs-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport { compose } from './helpers'; // transform snake_case to camelCase\n\nconst formattedSuggestion = structured_formatting => ({\n  mainText: structured_formatting.main_text,\n  secondaryText: structured_formatting.secondary_text\n});\n\nclass PlacesAutocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.init = () => {\n      if (!window.google) {\n        throw new Error('[react-places-autocomplete]: Google Maps JavaScript API library must be loaded. See: https://github.com/kenny-hibino/react-places-autocomplete#load-google-library');\n      }\n\n      if (!window.google.maps.places) {\n        throw new Error('[react-places-autocomplete]: Google Maps Places library must be loaded. Please add `libraries=places` to the src URL. See: https://github.com/kenny-hibino/react-places-autocomplete#load-google-library');\n      }\n\n      this.autocompleteService = new window.google.maps.places.AutocompleteService();\n      this.autocompleteOK = window.google.maps.places.PlacesServiceStatus.OK;\n      this.setState(state => {\n        if (state.ready) {\n          return null;\n        } else {\n          return {\n            ready: true\n          };\n        }\n      });\n    };\n\n    this.autocompleteCallback = (predictions, status) => {\n      this.setState({\n        loading: false\n      });\n\n      if (status !== this.autocompleteOK) {\n        this.props.onError(status, this.clearSuggestions);\n        return;\n      }\n\n      const highlightFirstSuggestion = this.props.highlightFirstSuggestion;\n      this.setState({\n        suggestions: predictions.map((p, idx) => ({\n          id: p.id,\n          description: p.description,\n          placeId: p.place_id,\n          active: highlightFirstSuggestion && idx === 0 ? true : false,\n          index: idx,\n          formattedSuggestion: formattedSuggestion(p.structured_formatting),\n          matchedSubstrings: p.matched_substrings,\n          terms: p.terms,\n          types: p.types\n        }))\n      });\n    };\n\n    this.fetchPredictions = () => {\n      const value = this.props.value;\n\n      if (value.length) {\n        this.setState({\n          loading: true\n        });\n        this.autocompleteService.getPlacePredictions(_objectSpread({}, this.props.searchOptions, {\n          input: value\n        }), this.autocompleteCallback);\n      }\n    };\n\n    this.clearSuggestions = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.clearActive = () => {\n      this.setState({\n        suggestions: this.state.suggestions.map(suggestion => _objectSpread({}, suggestion, {\n          active: false\n        }))\n      });\n    };\n\n    this.handleSelect = (address, placeId) => {\n      this.clearSuggestions();\n\n      if (this.props.onSelect) {\n        this.props.onSelect(address, placeId);\n      } else {\n        this.props.onChange(address);\n      }\n    };\n\n    this.getActiveSuggestion = () => {\n      return this.state.suggestions.find(suggestion => suggestion.active);\n    };\n\n    this.selectActiveAtIndex = index => {\n      const activeName = this.state.suggestions.find(suggestion => suggestion.index === index).description;\n      this.setActiveAtIndex(index);\n      this.props.onChange(activeName);\n    };\n\n    this.selectUserInputValue = () => {\n      this.clearActive();\n      this.props.onChange(this.state.userInputValue);\n    };\n\n    this.handleEnterKey = () => {\n      const activeSuggestion = this.getActiveSuggestion();\n\n      if (activeSuggestion === undefined) {\n        this.handleSelect(this.props.value, null);\n      } else {\n        this.handleSelect(activeSuggestion.description, activeSuggestion.placeId);\n      }\n    };\n\n    this.handleDownKey = () => {\n      if (this.state.suggestions.length === 0) {\n        return;\n      }\n\n      const activeSuggestion = this.getActiveSuggestion();\n\n      if (activeSuggestion === undefined) {\n        this.selectActiveAtIndex(0);\n      } else if (activeSuggestion.index === this.state.suggestions.length - 1) {\n        this.selectUserInputValue();\n      } else {\n        this.selectActiveAtIndex(activeSuggestion.index + 1);\n      }\n    };\n\n    this.handleUpKey = () => {\n      if (this.state.suggestions.length === 0) {\n        return;\n      }\n\n      const activeSuggestion = this.getActiveSuggestion();\n\n      if (activeSuggestion === undefined) {\n        this.selectActiveAtIndex(this.state.suggestions.length - 1);\n      } else if (activeSuggestion.index === 0) {\n        this.selectUserInputValue();\n      } else {\n        this.selectActiveAtIndex(activeSuggestion.index - 1);\n      }\n    };\n\n    this.handleInputKeyDown = event => {\n      /* eslint-disable indent */\n      switch (event.key) {\n        case 'Enter':\n          event.preventDefault();\n          this.handleEnterKey();\n          break;\n\n        case 'ArrowDown':\n          event.preventDefault(); // prevent the cursor from moving\n\n          this.handleDownKey();\n          break;\n\n        case 'ArrowUp':\n          event.preventDefault(); // prevent the cursor from moving\n\n          this.handleUpKey();\n          break;\n\n        case 'Escape':\n          this.clearSuggestions();\n          break;\n      }\n      /* eslint-enable indent */\n\n    };\n\n    this.setActiveAtIndex = index => {\n      this.setState({\n        suggestions: this.state.suggestions.map((suggestion, idx) => {\n          if (idx === index) {\n            return _objectSpread({}, suggestion, {\n              active: true\n            });\n          } else {\n            return _objectSpread({}, suggestion, {\n              active: false\n            });\n          }\n        })\n      });\n    };\n\n    this.handleInputChange = event => {\n      const value = event.target.value;\n      this.props.onChange(value);\n      this.setState({\n        userInputValue: value\n      });\n\n      if (!value) {\n        this.clearSuggestions();\n        return;\n      }\n\n      if (this.props.shouldFetchSuggestions) {\n        this.debouncedFetchPredictions();\n      }\n    };\n\n    this.handleInputOnBlur = () => {\n      if (!this.mousedownOnSuggestion) {\n        this.clearSuggestions();\n      }\n    };\n\n    this.getActiveSuggestionId = () => {\n      const activeSuggestion = this.getActiveSuggestion();\n      return activeSuggestion ? \"PlacesAutocomplete__suggestion-\".concat(activeSuggestion.placeId) : undefined;\n    };\n\n    this.getIsExpanded = () => {\n      return this.state.suggestions.length > 0;\n    };\n\n    this.getInputProps = (options = {}) => {\n      if (options.hasOwnProperty('value')) {\n        throw new Error('[react-places-autocomplete]: getInputProps does not accept `value`. Use `value` prop instead');\n      }\n\n      if (options.hasOwnProperty('onChange')) {\n        throw new Error('[react-places-autocomplete]: getInputProps does not accept `onChange`. Use `onChange` prop instead');\n      }\n\n      const defaultInputProps = {\n        type: 'text',\n        autoComplete: 'off',\n        role: 'combobox',\n        'aria-autocomplete': 'list',\n        'aria-expanded': this.getIsExpanded(),\n        'aria-activedescendant': this.getActiveSuggestionId(),\n        disabled: !this.state.ready\n      };\n      return _objectSpread({}, defaultInputProps, options, {\n        onKeyDown: compose(this.handleInputKeyDown, options.onKeyDown),\n        onBlur: compose(this.handleInputOnBlur, options.onBlur),\n        value: this.props.value,\n        onChange: event => {\n          this.handleInputChange(event);\n        }\n      });\n    };\n\n    this.getSuggestionItemProps = (suggestion, options = {}) => {\n      const handleSuggestionMouseEnter = this.handleSuggestionMouseEnter.bind(this, suggestion.index);\n      const handleSuggestionClick = this.handleSuggestionClick.bind(this, suggestion);\n      return _objectSpread({}, options, {\n        key: suggestion.id,\n        id: this.getActiveSuggestionId(),\n        role: 'option',\n        onMouseEnter: compose(handleSuggestionMouseEnter, options.onMouseEnter),\n        onMouseLeave: compose(this.handleSuggestionMouseLeave, options.onMouseLeave),\n        onMouseDown: compose(this.handleSuggestionMouseDown, options.onMouseDown),\n        onMouseUp: compose(this.handleSuggestionMouseUp, options.onMouseUp),\n        onTouchStart: compose(this.handleSuggestionTouchStart, options.onTouchStart),\n        onTouchEnd: compose(this.handleSuggestionMouseUp, options.onTouchEnd),\n        onClick: compose(handleSuggestionClick, options.onClick)\n      });\n    };\n\n    this.handleSuggestionMouseEnter = index => {\n      this.setActiveAtIndex(index);\n    };\n\n    this.handleSuggestionMouseLeave = () => {\n      this.mousedownOnSuggestion = false;\n      this.clearActive();\n    };\n\n    this.handleSuggestionMouseDown = event => {\n      event.preventDefault();\n      this.mousedownOnSuggestion = true;\n    };\n\n    this.handleSuggestionTouchStart = () => {\n      this.mousedownOnSuggestion = true;\n    };\n\n    this.handleSuggestionMouseUp = () => {\n      this.mousedownOnSuggestion = false;\n    };\n\n    this.handleSuggestionClick = (suggestion, event) => {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      const description = suggestion.description,\n            placeId = suggestion.placeId;\n      this.handleSelect(description, placeId);\n      setTimeout(() => {\n        this.mousedownOnSuggestion = false;\n      });\n    };\n\n    this.state = {\n      loading: false,\n      suggestions: [],\n      userInputValue: props.value,\n      ready: !props.googleCallbackName\n    };\n    this.debouncedFetchPredictions = debounce(this.fetchPredictions, this.props.debounce);\n  }\n\n  componentDidMount() {\n    const googleCallbackName = this.props.googleCallbackName;\n\n    if (googleCallbackName) {\n      if (!window.google) {\n        window[googleCallbackName] = this.init;\n      } else {\n        this.init();\n      }\n    } else {\n      this.init();\n    }\n  }\n\n  componentWillUnmount() {\n    const googleCallbackName = this.props.googleCallbackName;\n\n    if (googleCallbackName && window[googleCallbackName]) {\n      delete window[googleCallbackName];\n    }\n  }\n\n  render() {\n    return this.props.children({\n      getInputProps: this.getInputProps,\n      getSuggestionItemProps: this.getSuggestionItemProps,\n      loading: this.state.loading,\n      suggestions: this.state.suggestions\n    });\n  }\n\n}\n\nPlacesAutocomplete.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  children: PropTypes.func.isRequired,\n  onError: PropTypes.func,\n  onSelect: PropTypes.func,\n  searchOptions: PropTypes.shape({\n    bounds: PropTypes.object,\n    componentRestrictions: PropTypes.object,\n    location: PropTypes.object,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    radius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    types: PropTypes.array\n  }),\n  debounce: PropTypes.number,\n  highlightFirstSuggestion: PropTypes.bool,\n  shouldFetchSuggestions: PropTypes.bool,\n  googleCallbackName: PropTypes.string\n};\nPlacesAutocomplete.defaultProps = {\n  /* eslint-disable no-unused-vars, no-console */\n  onError: (status, _clearSuggestions) => console.error('[react-places-autocomplete]: error happened when fetching data from Google Maps API.\\nPlease check the docs here (https://developers.google.com/maps/documentation/javascript/places#place_details_responses)\\nStatus: ', status),\n\n  /* eslint-enable no-unused-vars, no-console */\n  searchOptions: {},\n  debounce: 200,\n  highlightFirstSuggestion: false,\n  shouldFetchSuggestions: true\n};\nexport default PlacesAutocomplete;","map":{"version":3,"sources":["C:\\Users\\Film\\clbs-app\\src\\Maps.js"],"names":["React","PropTypes","debounce","compose","formattedSuggestion","structured_formatting","mainText","main_text","secondaryText","secondary_text","PlacesAutocomplete","Component","constructor","props","init","window","google","Error","maps","places","autocompleteService","AutocompleteService","autocompleteOK","PlacesServiceStatus","OK","setState","state","ready","autocompleteCallback","predictions","status","loading","onError","clearSuggestions","highlightFirstSuggestion","suggestions","map","p","idx","id","description","placeId","place_id","active","index","matchedSubstrings","matched_substrings","terms","types","fetchPredictions","value","length","getPlacePredictions","searchOptions","input","clearActive","suggestion","handleSelect","address","onSelect","onChange","getActiveSuggestion","find","selectActiveAtIndex","activeName","setActiveAtIndex","selectUserInputValue","userInputValue","handleEnterKey","activeSuggestion","undefined","handleDownKey","handleUpKey","handleInputKeyDown","event","key","preventDefault","handleInputChange","target","shouldFetchSuggestions","debouncedFetchPredictions","handleInputOnBlur","mousedownOnSuggestion","getActiveSuggestionId","getIsExpanded","getInputProps","options","hasOwnProperty","defaultInputProps","type","autoComplete","role","disabled","onKeyDown","onBlur","getSuggestionItemProps","handleSuggestionMouseEnter","bind","handleSuggestionClick","onMouseEnter","onMouseLeave","handleSuggestionMouseLeave","onMouseDown","handleSuggestionMouseDown","onMouseUp","handleSuggestionMouseUp","onTouchStart","handleSuggestionTouchStart","onTouchEnd","onClick","setTimeout","googleCallbackName","componentDidMount","componentWillUnmount","render","children","propTypes","func","isRequired","string","shape","bounds","object","componentRestrictions","location","offset","oneOfType","number","radius","array","bool","defaultProps","_clearSuggestions","console","error"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\nimport { compose } from './helpers';\r\n\r\n// transform snake_case to camelCase\r\nconst formattedSuggestion = structured_formatting => ({\r\n  mainText: structured_formatting.main_text,\r\n  secondaryText: structured_formatting.secondary_text,\r\n});\r\n\r\nclass PlacesAutocomplete extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      suggestions: [],\r\n      userInputValue: props.value,\r\n      ready: !props.googleCallbackName,\r\n    };\r\n\r\n    this.debouncedFetchPredictions = debounce(\r\n      this.fetchPredictions,\r\n      this.props.debounce\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { googleCallbackName } = this.props;\r\n    if (googleCallbackName) {\r\n      if (!window.google) {\r\n        window[googleCallbackName] = this.init;\r\n      } else {\r\n        this.init();\r\n      }\r\n    } else {\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { googleCallbackName } = this.props;\r\n    if (googleCallbackName && window[googleCallbackName]) {\r\n      delete window[googleCallbackName];\r\n    }\r\n  }\r\n\r\n  init = () => {\r\n    if (!window.google) {\r\n      throw new Error(\r\n        '[react-places-autocomplete]: Google Maps JavaScript API library must be loaded. See: https://github.com/kenny-hibino/react-places-autocomplete#load-google-library'\r\n      );\r\n    }\r\n\r\n    if (!window.google.maps.places) {\r\n      throw new Error(\r\n        '[react-places-autocomplete]: Google Maps Places library must be loaded. Please add `libraries=places` to the src URL. See: https://github.com/kenny-hibino/react-places-autocomplete#load-google-library'\r\n      );\r\n    }\r\n\r\n    this.autocompleteService = new window.google.maps.places.AutocompleteService();\r\n    this.autocompleteOK = window.google.maps.places.PlacesServiceStatus.OK;\r\n    this.setState(state => {\r\n      if (state.ready) {\r\n        return null;\r\n      } else {\r\n        return { ready: true };\r\n      }\r\n    });\r\n  };\r\n\r\n  autocompleteCallback = (predictions, status) => {\r\n    this.setState({ loading: false });\r\n    if (status !== this.autocompleteOK) {\r\n      this.props.onError(status, this.clearSuggestions);\r\n      return;\r\n    }\r\n    const { highlightFirstSuggestion } = this.props;\r\n    this.setState({\r\n      suggestions: predictions.map((p, idx) => ({\r\n        id: p.id,\r\n        description: p.description,\r\n        placeId: p.place_id,\r\n        active: highlightFirstSuggestion && idx === 0 ? true : false,\r\n        index: idx,\r\n        formattedSuggestion: formattedSuggestion(p.structured_formatting),\r\n        matchedSubstrings: p.matched_substrings,\r\n        terms: p.terms,\r\n        types: p.types,\r\n      })),\r\n    });\r\n  };\r\n\r\n  fetchPredictions = () => {\r\n    const { value } = this.props;\r\n    if (value.length) {\r\n      this.setState({ loading: true });\r\n      this.autocompleteService.getPlacePredictions(\r\n        {\r\n          ...this.props.searchOptions,\r\n          input: value,\r\n        },\r\n        this.autocompleteCallback\r\n      );\r\n    }\r\n  };\r\n\r\n  clearSuggestions = () => {\r\n    this.setState({ suggestions: [] });\r\n  };\r\n\r\n  clearActive = () => {\r\n    this.setState({\r\n      suggestions: this.state.suggestions.map(suggestion => ({\r\n        ...suggestion,\r\n        active: false,\r\n      })),\r\n    });\r\n  };\r\n\r\n  handleSelect = (address, placeId) => {\r\n    this.clearSuggestions();\r\n    if (this.props.onSelect) {\r\n      this.props.onSelect(address, placeId);\r\n    } else {\r\n      this.props.onChange(address);\r\n    }\r\n  };\r\n\r\n  getActiveSuggestion = () => {\r\n    return this.state.suggestions.find(suggestion => suggestion.active);\r\n  };\r\n\r\n  selectActiveAtIndex = index => {\r\n    const activeName = this.state.suggestions.find(\r\n      suggestion => suggestion.index === index\r\n    ).description;\r\n    this.setActiveAtIndex(index);\r\n    this.props.onChange(activeName);\r\n  };\r\n\r\n  selectUserInputValue = () => {\r\n    this.clearActive();\r\n    this.props.onChange(this.state.userInputValue);\r\n  };\r\n\r\n  handleEnterKey = () => {\r\n    const activeSuggestion = this.getActiveSuggestion();\r\n    if (activeSuggestion === undefined) {\r\n      this.handleSelect(this.props.value, null);\r\n    } else {\r\n      this.handleSelect(activeSuggestion.description, activeSuggestion.placeId);\r\n    }\r\n  };\r\n\r\n  handleDownKey = () => {\r\n    if (this.state.suggestions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const activeSuggestion = this.getActiveSuggestion();\r\n    if (activeSuggestion === undefined) {\r\n      this.selectActiveAtIndex(0);\r\n    } else if (activeSuggestion.index === this.state.suggestions.length - 1) {\r\n      this.selectUserInputValue();\r\n    } else {\r\n      this.selectActiveAtIndex(activeSuggestion.index + 1);\r\n    }\r\n  };\r\n\r\n  handleUpKey = () => {\r\n    if (this.state.suggestions.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const activeSuggestion = this.getActiveSuggestion();\r\n    if (activeSuggestion === undefined) {\r\n      this.selectActiveAtIndex(this.state.suggestions.length - 1);\r\n    } else if (activeSuggestion.index === 0) {\r\n      this.selectUserInputValue();\r\n    } else {\r\n      this.selectActiveAtIndex(activeSuggestion.index - 1);\r\n    }\r\n  };\r\n\r\n  handleInputKeyDown = event => {\r\n    /* eslint-disable indent */\r\n    switch (event.key) {\r\n      case 'Enter':\r\n        event.preventDefault();\r\n        this.handleEnterKey();\r\n        break;\r\n      case 'ArrowDown':\r\n        event.preventDefault(); // prevent the cursor from moving\r\n        this.handleDownKey();\r\n        break;\r\n      case 'ArrowUp':\r\n        event.preventDefault(); // prevent the cursor from moving\r\n        this.handleUpKey();\r\n        break;\r\n      case 'Escape':\r\n        this.clearSuggestions();\r\n        break;\r\n    }\r\n    /* eslint-enable indent */\r\n  };\r\n\r\n  setActiveAtIndex = index => {\r\n    this.setState({\r\n      suggestions: this.state.suggestions.map((suggestion, idx) => {\r\n        if (idx === index) {\r\n          return { ...suggestion, active: true };\r\n        } else {\r\n          return { ...suggestion, active: false };\r\n        }\r\n      }),\r\n    });\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { value } = event.target;\r\n    this.props.onChange(value);\r\n    this.setState({ userInputValue: value });\r\n    if (!value) {\r\n      this.clearSuggestions();\r\n      return;\r\n    }\r\n    if (this.props.shouldFetchSuggestions) {\r\n      this.debouncedFetchPredictions();\r\n    }\r\n  };\r\n\r\n  handleInputOnBlur = () => {\r\n    if (!this.mousedownOnSuggestion) {\r\n      this.clearSuggestions();\r\n    }\r\n  };\r\n\r\n  getActiveSuggestionId = () => {\r\n    const activeSuggestion = this.getActiveSuggestion();\r\n    return activeSuggestion\r\n      ? `PlacesAutocomplete__suggestion-${activeSuggestion.placeId}`\r\n      : undefined;\r\n  };\r\n\r\n  getIsExpanded = () => {\r\n    return this.state.suggestions.length > 0;\r\n  };\r\n\r\n  getInputProps = (options = {}) => {\r\n    if (options.hasOwnProperty('value')) {\r\n      throw new Error(\r\n        '[react-places-autocomplete]: getInputProps does not accept `value`. Use `value` prop instead'\r\n      );\r\n    }\r\n\r\n    if (options.hasOwnProperty('onChange')) {\r\n      throw new Error(\r\n        '[react-places-autocomplete]: getInputProps does not accept `onChange`. Use `onChange` prop instead'\r\n      );\r\n    }\r\n\r\n    const defaultInputProps = {\r\n      type: 'text',\r\n      autoComplete: 'off',\r\n      role: 'combobox',\r\n      'aria-autocomplete': 'list',\r\n      'aria-expanded': this.getIsExpanded(),\r\n      'aria-activedescendant': this.getActiveSuggestionId(),\r\n      disabled: !this.state.ready,\r\n    };\r\n\r\n    return {\r\n      ...defaultInputProps,\r\n      ...options,\r\n      onKeyDown: compose(this.handleInputKeyDown, options.onKeyDown),\r\n      onBlur: compose(this.handleInputOnBlur, options.onBlur),\r\n      value: this.props.value,\r\n      onChange: event => {\r\n        this.handleInputChange(event);\r\n      },\r\n    };\r\n  };\r\n\r\n  getSuggestionItemProps = (suggestion, options = {}) => {\r\n    const handleSuggestionMouseEnter = this.handleSuggestionMouseEnter.bind(\r\n      this,\r\n      suggestion.index\r\n    );\r\n    const handleSuggestionClick = this.handleSuggestionClick.bind(\r\n      this,\r\n      suggestion\r\n    );\r\n\r\n    return {\r\n      ...options,\r\n      key: suggestion.id,\r\n      id: this.getActiveSuggestionId(),\r\n      role: 'option',\r\n      onMouseEnter: compose(handleSuggestionMouseEnter, options.onMouseEnter),\r\n      onMouseLeave: compose(\r\n        this.handleSuggestionMouseLeave,\r\n        options.onMouseLeave\r\n      ),\r\n      onMouseDown: compose(this.handleSuggestionMouseDown, options.onMouseDown),\r\n      onMouseUp: compose(this.handleSuggestionMouseUp, options.onMouseUp),\r\n      onTouchStart: compose(\r\n        this.handleSuggestionTouchStart,\r\n        options.onTouchStart\r\n      ),\r\n      onTouchEnd: compose(this.handleSuggestionMouseUp, options.onTouchEnd),\r\n      onClick: compose(handleSuggestionClick, options.onClick),\r\n    };\r\n  };\r\n\r\n  handleSuggestionMouseEnter = index => {\r\n    this.setActiveAtIndex(index);\r\n  };\r\n\r\n  handleSuggestionMouseLeave = () => {\r\n    this.mousedownOnSuggestion = false;\r\n    this.clearActive();\r\n  };\r\n\r\n  handleSuggestionMouseDown = event => {\r\n    event.preventDefault();\r\n    this.mousedownOnSuggestion = true;\r\n  };\r\n\r\n  handleSuggestionTouchStart = () => {\r\n    this.mousedownOnSuggestion = true;\r\n  };\r\n\r\n  handleSuggestionMouseUp = () => {\r\n    this.mousedownOnSuggestion = false;\r\n  };\r\n\r\n  handleSuggestionClick = (suggestion, event) => {\r\n    if (event && event.preventDefault) {\r\n      event.preventDefault();\r\n    }\r\n    const { description, placeId } = suggestion;\r\n    this.handleSelect(description, placeId);\r\n    setTimeout(() => {\r\n      this.mousedownOnSuggestion = false;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.props.children({\r\n      getInputProps: this.getInputProps,\r\n      getSuggestionItemProps: this.getSuggestionItemProps,\r\n      loading: this.state.loading,\r\n      suggestions: this.state.suggestions,\r\n    });\r\n  }\r\n}\r\n\r\nPlacesAutocomplete.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  children: PropTypes.func.isRequired,\r\n  onError: PropTypes.func,\r\n  onSelect: PropTypes.func,\r\n  searchOptions: PropTypes.shape({\r\n    bounds: PropTypes.object,\r\n    componentRestrictions: PropTypes.object,\r\n    location: PropTypes.object,\r\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    radius: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    types: PropTypes.array,\r\n  }),\r\n  debounce: PropTypes.number,\r\n  highlightFirstSuggestion: PropTypes.bool,\r\n  shouldFetchSuggestions: PropTypes.bool,\r\n  googleCallbackName: PropTypes.string,\r\n};\r\n\r\nPlacesAutocomplete.defaultProps = {\r\n  /* eslint-disable no-unused-vars, no-console */\r\n  onError: (status, _clearSuggestions) =>\r\n    console.error(\r\n      '[react-places-autocomplete]: error happened when fetching data from Google Maps API.\\nPlease check the docs here (https://developers.google.com/maps/documentation/javascript/places#place_details_responses)\\nStatus: ',\r\n      status\r\n    ),\r\n  /* eslint-enable no-unused-vars, no-console */\r\n  searchOptions: {},\r\n  debounce: 200,\r\n  highlightFirstSuggestion: false,\r\n  shouldFetchSuggestions: true,\r\n};\r\n\r\nexport default PlacesAutocomplete;"]},"metadata":{},"sourceType":"module"}