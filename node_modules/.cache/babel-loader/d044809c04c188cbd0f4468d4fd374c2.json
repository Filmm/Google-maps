{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Film\\\\clbs-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\Film\\\\clbs-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Film\\\\clbs-app\\\\src\\\\Maps.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default class ReactGoogleAutocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.autocomplete = null;\n    this.event = null;\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          _this$props$types = _this$props.types,\n          types = _this$props$types === void 0 ? ['(cities)'] : _this$props$types,\n          componentRestrictions = _this$props.componentRestrictions,\n          bounds = _this$props.bounds,\n          _this$props$fields = _this$props.fields,\n          fields = _this$props$fields === void 0 ? [\"address_components\", \"geometry.location\", \"place_id\", \"formatted_address\"] : _this$props$fields;\n    const config = {\n      types,\n      bounds,\n      fields\n    };\n\n    if (componentRestrictions) {\n      config.componentRestrictions = componentRestrictions;\n    }\n\n    this.disableAutofill();\n    this.autocomplete = new google.maps.places.Autocomplete(this.refs.input, config);\n    this.event = this.autocomplete.addListener('place_changed', this.onSelected.bind(this));\n  }\n\n  disableAutofill() {\n    // Autofill workaround adapted from https://stackoverflow.com/questions/29931712/chrome-autofill-covers-autocomplete-for-google-maps-api-v3/49161445#49161445\n    if (window.MutationObserver) {\n      const observerHack = new MutationObserver(() => {\n        observerHack.disconnect();\n\n        if (this.refs && this.refs.input) {\n          this.refs.input.autocomplete = 'disable-autofill';\n        }\n      });\n      observerHack.observe(this.refs.input, {\n        attributes: true,\n        attributeFilter: ['autocomplete']\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.event.remove();\n  }\n\n  onSelected() {\n    if (this.props.onPlaceSelected) {\n      this.props.onPlaceSelected(this.autocomplete.getPlace());\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          onPlaceSelected = _this$props2.onPlaceSelected,\n          types = _this$props2.types,\n          componentRestrictions = _this$props2.componentRestrictions,\n          bounds = _this$props2.bounds,\n          rest = _objectWithoutProperties(_this$props2, [\"onPlaceSelected\", \"types\", \"componentRestrictions\", \"bounds\"]);\n\n    return React.createElement(\"input\", Object.assign({\n      ref: \"input\"\n    }, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\nReactGoogleAutocomplete.propTypes = {\n  onPlaceSelected: PropTypes.func,\n  types: PropTypes.array,\n  componentRestrictions: PropTypes.object,\n  bounds: PropTypes.object,\n  fields: PropTypes.array\n};\nexport class ReactCustomGoogleAutocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.service = new google.maps.places.AutocompleteService();\n  }\n\n  onChange(e) {\n    const _this$props$types2 = this.props.types,\n          types = _this$props$types2 === void 0 ? ['(cities)'] : _this$props$types2;\n\n    if (e.target.value) {\n      this.service.getPlacePredictions({\n        input: e.target.value,\n        types\n      }, (predictions, status) => {\n        if (status === 'OK' && predictions && predictions.length > 0) {\n          this.props.onOpen(predictions);\n          console.log(predictions);\n        } else {\n          this.props.onClose();\n        }\n      });\n    } else {\n      this.props.onClose();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.input.value) {\n      this.placeService = new google.maps.places.PlacesService(this.refs.div);\n      this.placeService.getDetails({\n        placeId: this.props.input.value\n      }, (e, status) => {\n        if (status === 'OK') {\n          this.refs.input.value = e.formatted_address;\n        }\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.cloneElement(this.props.input, _objectSpread({}, this.props, {\n      ref: 'input',\n      onChange: e => {\n        this.onChange(e);\n      }\n    })), React.createElement(\"div\", {\n      ref: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }));\n  }\n\n}\nReactCustomGoogleAutocomplete.propTypes = {\n  input: PropTypes.node.isRequired,\n  onOpen: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\Film\\clbs-app\\src\\Maps.js"],"names":["React","PropTypes","ReactGoogleAutocomplete","Component","constructor","props","autocomplete","event","componentDidMount","types","componentRestrictions","bounds","fields","config","disableAutofill","google","maps","places","Autocomplete","refs","input","addListener","onSelected","bind","window","MutationObserver","observerHack","disconnect","observe","attributes","attributeFilter","componentWillUnmount","remove","onPlaceSelected","getPlace","render","rest","propTypes","func","array","object","ReactCustomGoogleAutocomplete","service","AutocompleteService","onChange","e","target","value","getPlacePredictions","predictions","status","length","onOpen","console","log","onClose","placeService","PlacesService","div","getDetails","placeId","formatted_address","cloneElement","ref","node","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ReactGoogleAutocomplete extends React.Component {\r\n  static propTypes = {\r\n    onPlaceSelected: PropTypes.func,\r\n    types: PropTypes.array,\r\n    componentRestrictions: PropTypes.object,\r\n    bounds: PropTypes.object,\r\n    fields: PropTypes.array,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.autocomplete = null;\r\n    this.event = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      types=['(cities)'],\r\n      componentRestrictions,\r\n      bounds,\r\n      fields = [\"address_components\", \"geometry.location\", \"place_id\", \"formatted_address\"]\r\n    } = this.props;\r\n    const config = {\r\n      types,\r\n      bounds,\r\n      fields,\r\n    };\r\n\r\n    if (componentRestrictions) {\r\n      config.componentRestrictions = componentRestrictions;\r\n    }\r\n\r\n    this.disableAutofill();\r\n\r\n    this.autocomplete = new google.maps.places.Autocomplete(this.refs.input, config);\r\n\r\n    this.event = this.autocomplete.addListener('place_changed', this.onSelected.bind(this));\r\n  }\r\n\r\n  disableAutofill() {\r\n    // Autofill workaround adapted from https://stackoverflow.com/questions/29931712/chrome-autofill-covers-autocomplete-for-google-maps-api-v3/49161445#49161445\r\n    if (window.MutationObserver) {\r\n      const observerHack = new MutationObserver(() => {\r\n        observerHack.disconnect();\r\n        if (this.refs && this.refs.input) {\r\n          this.refs.input.autocomplete = 'disable-autofill';\r\n        }\r\n      });\r\n      observerHack.observe(this.refs.input, {\r\n        attributes: true,\r\n        attributeFilter: ['autocomplete'],\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.event.remove();\r\n  }\r\n\r\n  onSelected() {\r\n    if (this.props.onPlaceSelected) {\r\n      this.props.onPlaceSelected(this.autocomplete.getPlace());\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {onPlaceSelected, types, componentRestrictions, bounds, ...rest} = this.props;\r\n\r\n    return (\r\n      <input\r\n        ref=\"input\"\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport class ReactCustomGoogleAutocomplete extends React.Component {\r\n  static propTypes = {\r\n    input: PropTypes.node.isRequired,\r\n    onOpen: PropTypes.func.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.service = new google.maps.places.AutocompleteService();\r\n  }\r\n\r\n  onChange(e) {\r\n    const { types=['(cities)'] } = this.props;\r\n\r\n    if(e.target.value) {\r\n      this.service.getPlacePredictions({input: e.target.value, types}, (predictions, status) => {\r\n        if (status === 'OK' && predictions && predictions.length > 0) {\r\n          this.props.onOpen(predictions);\r\n            console.log(predictions);\r\n        } else {\r\n          this.props.onClose();\r\n        }\r\n      });\r\n    } else {\r\n      this.props.onClose();\r\n    }\r\n  }\r\n\r\n\tcomponentDidMount() {\r\n    if (this.props.input.value) {\r\n      this.placeService = new google.maps.places.PlacesService(this.refs.div);\r\n      this.placeService.getDetails({placeId: this.props.input.value}, (e, status) => {\r\n        if(status === 'OK') {\r\n\t\t\t\t\tthis.refs.input.value = e.formatted_address;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {React.cloneElement(this.props.input,\r\n          {\r\n            ...this.props,\r\n    \t\t\t  ref: 'input',\r\n            onChange: (e) => {\r\n              this.onChange(e);\r\n            },\r\n          }\r\n        )}\r\n        <div ref=\"div\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}