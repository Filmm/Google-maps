{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Film\\\\clbs-app\\\\src\\\\Maps.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\nexport class MapContainer extends Component {\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: 18.796143,\n        lng: 98.979263\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n\n    const _ = require(\"lodash\");\n\n    const _require = require(\"recompose\"),\n          compose = _require.compose,\n          withProps = _require.withProps,\n          lifecycle = _require.lifecycle;\n\n    const _require2 = require(\"react-google-maps\"),\n          withScriptjs = _require2.withScriptjs,\n          withGoogleMap = _require2.withGoogleMap,\n          GoogleMap = _require2.GoogleMap,\n          Marker = _require2.Marker;\n\n    const _require3 = require(\"react-google-maps/lib/components/places/SearchBox\"),\n          SearchBox = _require3.SearchBox;\n\n    const MapWithASearchBox = compose(withProps({\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\n      loadingElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }),\n      containerElement: React.createElement(\"div\", {\n        style: {\n          height: \"400px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }),\n      mapElement: React.createElement(\"div\", {\n        style: {\n          height: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })\n    }), lifecycle({\n      componentWillMount() {\n        const refs = {};\n        this.setState({\n          bounds: null,\n          center: {\n            lat: 41.9,\n            lng: -87.624\n          },\n          markers: [],\n          onMapMounted: ref => {\n            refs.map = ref;\n          },\n          onBoundsChanged: () => {\n            this.setState({\n              bounds: refs.map.getBounds(),\n              center: refs.map.getCenter()\n            });\n          },\n          onSearchBoxMounted: ref => {\n            refs.searchBox = ref;\n          },\n          onPlacesChanged: () => {\n            const places = refs.searchBox.getPlaces();\n            const bounds = new google.maps.LatLngBounds();\n            places.forEach(place => {\n              if (place.geometry.viewport) {\n                bounds.union(place.geometry.viewport);\n              } else {\n                bounds.extend(place.geometry.location);\n              }\n            });\n            const nextMarkers = places.map(place => ({\n              position: place.geometry.location\n            }));\n\n            const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\n\n            this.setState({\n              center: nextCenter,\n              markers: nextMarkers\n            }); // refs.map.fitBounds(bounds);\n          }\n        });\n      }\n\n    }), withScriptjs, withGoogleMap)(props => React.createElement(GoogleMap, {\n      ref: props.onMapMounted,\n      defaultZoom: 15,\n      center: props.center,\n      onBoundsChanged: props.onBoundsChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(SearchBox, {\n      ref: props.onSearchBoxMounted,\n      bounds: props.bounds,\n      controlPosition: google.maps.ControlPosition.TOP_LEFT,\n      onPlacesChanged: props.onPlacesChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Customized your placeholder\",\n      style: {\n        boxSizing: \"border-box\",\n        border: \"1px solid transparent\",\n        width: \"240px\",\n        height: \"32px\",\n        marginTop: \"27px\",\n        padding: \"0 12px\",\n        borderRadius: \"3px\",\n        boxShadow: \"0 2px 6px rgba(0, 0, 0, 0.3)\",\n        fontSize: \"14px\",\n        outline: \"none\",\n        textOverflow: \"ellipses\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), props.markers.map((marker, index) => React.createElement(Marker, {\n      key: index,\n      position: marker.position,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))));\n    React.createElement(MapWithASearchBox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    });\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCS4QDM_de0JGU7Qux2xa4VhxtVdmgXRJA'\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Film\\clbs-app\\src\\Maps.js"],"names":["React","Component","Map","GoogleApiWrapper","SearchBox","mapStyles","width","height","MapContainer","render","props","google","lat","lng","_","require","compose","withProps","lifecycle","withScriptjs","withGoogleMap","GoogleMap","Marker","MapWithASearchBox","googleMapURL","loadingElement","containerElement","mapElement","componentWillMount","refs","setState","bounds","center","markers","onMapMounted","ref","map","onBoundsChanged","getBounds","getCenter","onSearchBoxMounted","searchBox","onPlacesChanged","places","getPlaces","maps","LatLngBounds","forEach","place","geometry","viewport","union","extend","location","nextMarkers","position","nextCenter","get","state","ControlPosition","TOP_LEFT","boxSizing","border","marginTop","padding","borderRadius","boxShadow","fontSize","outline","textOverflow","marker","index","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper} from 'google-maps-react';\r\nimport SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\r\n\r\n\r\n\r\n\r\nconst mapStyles = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={14}\r\n        style={mapStyles}\r\n        initialCenter={{\r\n         lat: 18.796143, lng: 98.979263\r\n        }}\r\n      />\r\n    );\r\n\r\n    const _ = require(\"lodash\");\r\n    const { compose, withProps, lifecycle } = require(\"recompose\");\r\n    const {\r\n      withScriptjs,\r\n      withGoogleMap,\r\n      GoogleMap,\r\n      Marker,\r\n    } = require(\"react-google-maps\");\r\n    const { SearchBox } = require(\"react-google-maps/lib/components/places/SearchBox\");\r\n    \r\n    const MapWithASearchBox = compose(\r\n      withProps({\r\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places\",\r\n        loadingElement: <div style={{ height: `100%` }} />,\r\n        containerElement: <div style={{ height: `400px` }} />,\r\n        mapElement: <div style={{ height: `100%` }} />,\r\n      }),\r\n      lifecycle({\r\n        componentWillMount() {\r\n          const refs = {}\r\n    \r\n          this.setState({\r\n            bounds: null,\r\n            center: {\r\n              lat: 41.9, lng: -87.624\r\n            },\r\n            markers: [],\r\n            onMapMounted: ref => {\r\n              refs.map = ref;\r\n            },\r\n            onBoundsChanged: () => {\r\n              this.setState({\r\n                bounds: refs.map.getBounds(),\r\n                center: refs.map.getCenter(),\r\n              })\r\n            },\r\n            onSearchBoxMounted: ref => {\r\n              refs.searchBox = ref;\r\n            },\r\n            onPlacesChanged: () => {\r\n              const places = refs.searchBox.getPlaces();\r\n              const bounds = new google.maps.LatLngBounds();\r\n    \r\n              places.forEach(place => {\r\n                if (place.geometry.viewport) {\r\n                  bounds.union(place.geometry.viewport)\r\n                } else {\r\n                  bounds.extend(place.geometry.location)\r\n                }\r\n              });\r\n              const nextMarkers = places.map(place => ({\r\n                position: place.geometry.location,\r\n              }));\r\n              const nextCenter = _.get(nextMarkers, '0.position', this.state.center);\r\n    \r\n              this.setState({\r\n                center: nextCenter,\r\n                markers: nextMarkers,\r\n              });\r\n              // refs.map.fitBounds(bounds);\r\n            },\r\n          })\r\n        },\r\n      }),\r\n      withScriptjs,\r\n      withGoogleMap\r\n    )(props =>\r\n      <GoogleMap\r\n        ref={props.onMapMounted}\r\n        defaultZoom={15}\r\n        center={props.center}\r\n        onBoundsChanged={props.onBoundsChanged}\r\n      >\r\n        <SearchBox\r\n          ref={props.onSearchBoxMounted}\r\n          bounds={props.bounds}\r\n          controlPosition={google.maps.ControlPosition.TOP_LEFT}\r\n          onPlacesChanged={props.onPlacesChanged}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Customized your placeholder\"\r\n            style={{\r\n              boxSizing: `border-box`,\r\n              border: `1px solid transparent`,\r\n              width: `240px`,\r\n              height: `32px`,\r\n              marginTop: `27px`,\r\n              padding: `0 12px`,\r\n              borderRadius: `3px`,\r\n              boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n              fontSize: `14px`,\r\n              outline: `none`,\r\n              textOverflow: `ellipses`,\r\n            }}\r\n          />\r\n        </SearchBox>\r\n        {props.markers.map((marker, index) =>\r\n          <Marker key={index} position={marker.position} />\r\n        )}\r\n      </GoogleMap>\r\n    );\r\n    \r\n    <MapWithASearchBox />\r\n  }\r\n}\r\n    \r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyCS4QDM_de0JGU7Qux2xa4VhxtVdmgXRJA'\r\n})(MapContainer);"]},"metadata":{},"sourceType":"module"}