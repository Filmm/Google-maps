{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Film\\\\clbs-app\\\\src\\\\AutoComplete.js\";\nimport React from 'react';\nimport { Image, Text } from 'react-native';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nconst homePlace = {\n  description: 'Home',\n  geometry: {\n    location: {\n      lat: 48.8152937,\n      lng: 2.4597668\n    }\n  }\n};\nconst workPlace = {\n  description: 'Work',\n  geometry: {\n    location: {\n      lat: 48.8496818,\n      lng: 2.2940881\n    }\n  }\n};\n\nconst GooglePlacesInput = () => {\n  return React.createElement(GooglePlacesAutocomplete, {\n    placeholder: \"Search\",\n    minLength: 2 // minimum length of text to search\n    ,\n    autoFocus: false,\n    returnKeyType: 'search' // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\n    ,\n    keyboardAppearance: 'light' // Can be left out for default keyboardAppearance https://facebook.github.io/react-native/docs/textinput.html#keyboardappearance\n    ,\n    listViewDisplayed: \"auto\" // true/false/undefined\n    ,\n    fetchDetails: true,\n    renderDescription: row => row.description // custom description render\n    ,\n    onPress: (data, details = null) => {\n      // 'details' is provided when fetchDetails = true\n      console.log(data, details);\n    },\n    getDefaultValue: () => '',\n    query: {\n      // available options: https://developers.google.com/places/web-service/autocomplete\n      key: 'YOUR API KEY',\n      language: 'en',\n      // language of the results\n      types: '(cities)' // default: 'geocode'\n\n    },\n    styles: {\n      textInputContainer: {\n        width: '100%'\n      },\n      description: {\n        fontWeight: 'bold'\n      },\n      predefinedPlacesDescription: {\n        color: '#1faadb'\n      }\n    },\n    currentLocation: true // Will add a 'Current location' button at the top of the predefined places list\n    ,\n    currentLocationLabel: \"Current location\",\n    nearbyPlacesAPI: \"GooglePlacesSearch\" // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\n    ,\n    GoogleReverseGeocodingQuery: {// available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\n    },\n    GooglePlacesSearchQuery: {\n      // available options for GooglePlacesSearch API : https://developers.google.com/places/web-service/search\n      rankby: 'distance',\n      type: 'cafe'\n    },\n    GooglePlacesDetailsQuery: {\n      // available options for GooglePlacesDetails API : https://developers.google.com/places/web-service/details\n      fields: 'formatted_address'\n    },\n    filterReverseGeocodingByTypes: ['locality', 'administrative_area_level_3'] // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\n    ,\n    predefinedPlaces: [homePlace, workPlace],\n    debounce: 200 // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\n    ,\n    renderLeftButton: () => React.createElement(Image, {\n      source: require('path/custom/left-icon'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }),\n    renderRightButton: () => React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Custom text after the input\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["C:\\Users\\Film\\clbs-app\\src\\AutoComplete.js"],"names":["React","Image","Text","GooglePlacesAutocomplete","homePlace","description","geometry","location","lat","lng","workPlace","GooglePlacesInput","row","data","details","console","log","key","language","types","textInputContainer","width","fontWeight","predefinedPlacesDescription","color","rankby","type","fields","require"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,cAA5B;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AAEA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,WAAW,EAAE,MAAf;AAAuBC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,GAAG,EAAE,UAAP;AAAmBC,MAAAA,GAAG,EAAE;AAAxB;AAAZ;AAAjC,CAAlB;AACA,MAAMC,SAAS,GAAG;AAAEL,EAAAA,WAAW,EAAE,MAAf;AAAuBC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,GAAG,EAAE,UAAP;AAAmBC,MAAAA,GAAG,EAAE;AAAxB;AAAZ;AAAjC,CAAlB;;AAEA,MAAME,iBAAiB,GAAG,MAAM;AAC9B,SACE,oBAAC,wBAAD;AACE,IAAA,WAAW,EAAC,QADd;AAEE,IAAA,SAAS,EAAE,CAFb,CAEgB;AAFhB;AAGE,IAAA,SAAS,EAAE,KAHb;AAIE,IAAA,aAAa,EAAE,QAJjB,CAI2B;AAJ3B;AAKE,IAAA,kBAAkB,EAAE,OALtB,CAK+B;AAL/B;AAME,IAAA,iBAAiB,EAAC,MANpB,CAM8B;AAN9B;AAOE,IAAA,YAAY,EAAE,IAPhB;AAQE,IAAA,iBAAiB,EAAEC,GAAG,IAAIA,GAAG,CAACP,WARhC,CAQ6C;AAR7C;AASE,IAAA,OAAO,EAAE,CAACQ,IAAD,EAAOC,OAAO,GAAG,IAAjB,KAA0B;AAAE;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,OAAlB;AACD,KAXH;AAaE,IAAA,eAAe,EAAE,MAAM,EAbzB;AAeE,IAAA,KAAK,EAAE;AACL;AACAG,MAAAA,GAAG,EAAE,cAFA;AAGLC,MAAAA,QAAQ,EAAE,IAHL;AAGW;AAChBC,MAAAA,KAAK,EAAE,UAJF,CAIa;;AAJb,KAfT;AAsBE,IAAA,MAAM,EAAE;AACNC,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,KAAK,EAAE;AADW,OADd;AAINhB,MAAAA,WAAW,EAAE;AACXiB,QAAAA,UAAU,EAAE;AADD,OAJP;AAONC,MAAAA,2BAA2B,EAAE;AAC3BC,QAAAA,KAAK,EAAE;AADoB;AAPvB,KAtBV;AAkCE,IAAA,eAAe,EAAE,IAlCnB,CAkCyB;AAlCzB;AAmCE,IAAA,oBAAoB,EAAC,kBAnCvB;AAoCE,IAAA,eAAe,EAAC,oBApClB,CAoCuC;AApCvC;AAqCE,IAAA,2BAA2B,EAAE,CAC3B;AAD2B,KArC/B;AAwCE,IAAA,uBAAuB,EAAE;AACvB;AACAC,MAAAA,MAAM,EAAE,UAFe;AAGvBC,MAAAA,IAAI,EAAE;AAHiB,KAxC3B;AA8CE,IAAA,wBAAwB,EAAE;AACxB;AACAC,MAAAA,MAAM,EAAE;AAFgB,KA9C5B;AAmDE,IAAA,6BAA6B,EAAE,CAAC,UAAD,EAAa,6BAAb,CAnDjC,CAmD8E;AAnD9E;AAoDE,IAAA,gBAAgB,EAAE,CAACvB,SAAD,EAAYM,SAAZ,CApDpB;AAsDE,IAAA,QAAQ,EAAE,GAtDZ,CAsDiB;AAtDjB;AAuDE,IAAA,gBAAgB,EAAE,MAAO,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEkB,OAAO,CAAC,uBAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvD3B;AAwDE,IAAA,iBAAiB,EAAE,MAAM,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAxD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA4DD,CA7DD","sourcesContent":["import React from 'react';\r\nimport { Image, Text } from 'react-native';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\n\r\nconst homePlace = { description: 'Home', geometry: { location: { lat: 48.8152937, lng: 2.4597668 } }};\r\nconst workPlace = { description: 'Work', geometry: { location: { lat: 48.8496818, lng: 2.2940881 } }};\r\n\r\nconst GooglePlacesInput = () => {\r\n  return (\r\n    <GooglePlacesAutocomplete\r\n      placeholder='Search'\r\n      minLength={2} // minimum length of text to search\r\n      autoFocus={false}\r\n      returnKeyType={'search'} // Can be left out for default return key https://facebook.github.io/react-native/docs/textinput.html#returnkeytype\r\n      keyboardAppearance={'light'} // Can be left out for default keyboardAppearance https://facebook.github.io/react-native/docs/textinput.html#keyboardappearance\r\n      listViewDisplayed='auto'    // true/false/undefined\r\n      fetchDetails={true}\r\n      renderDescription={row => row.description} // custom description render\r\n      onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\r\n        console.log(data, details);\r\n      }}\r\n\r\n      getDefaultValue={() => ''}\r\n\r\n      query={{\r\n        // available options: https://developers.google.com/places/web-service/autocomplete\r\n        key: 'YOUR API KEY',\r\n        language: 'en', // language of the results\r\n        types: '(cities)' // default: 'geocode'\r\n      }}\r\n\r\n      styles={{\r\n        textInputContainer: {\r\n          width: '100%'\r\n        },\r\n        description: {\r\n          fontWeight: 'bold'\r\n        },\r\n        predefinedPlacesDescription: {\r\n          color: '#1faadb'\r\n        }\r\n      }}\r\n\r\n      currentLocation={true} // Will add a 'Current location' button at the top of the predefined places list\r\n      currentLocationLabel=\"Current location\"\r\n      nearbyPlacesAPI='GooglePlacesSearch' // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\r\n      GoogleReverseGeocodingQuery={{\r\n        // available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\r\n      }}\r\n      GooglePlacesSearchQuery={{\r\n        // available options for GooglePlacesSearch API : https://developers.google.com/places/web-service/search\r\n        rankby: 'distance',\r\n        type: 'cafe'\r\n      }}\r\n      \r\n      GooglePlacesDetailsQuery={{\r\n        // available options for GooglePlacesDetails API : https://developers.google.com/places/web-service/details\r\n        fields: 'formatted_address',\r\n      }}\r\n\r\n      filterReverseGeocodingByTypes={['locality', 'administrative_area_level_3']} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\r\n      predefinedPlaces={[homePlace, workPlace]}\r\n\r\n      debounce={200} // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\r\n      renderLeftButton={()  => <Image source={require('path/custom/left-icon')} />}\r\n      renderRightButton={() => <Text>Custom text after the input</Text>}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}